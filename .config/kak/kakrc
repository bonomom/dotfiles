# Set default colorscheme
colorscheme tomorrow-night

# Set tabstop of 4
set global tabstop 4

# Set whitespace face
face Whitespace rgb:464846,default

# Upon opening a new buffer
hook global WinCreate [^*]* %{
	# Load editorconfig
	editorconfig-load

	# Show whitespaces
	addhl show_whitespaces -tab > -tabpad - -lf $

	# Highlight colum 80
	addhl column 80 default,rgb:333333
}

# Use jj to exit insert mode.
hook global InsertChar j %{ try %{
	exec -draft hH <a-k>jj<ret> d
	exec <esc>
} }

# Switch buffers using tab and shift-tab
map global normal <tab> :bn<ret>
map global normal <backtab> :bp<ret>

# Adds unique highlighting for #include macros in c and cpp.
%sh{
	includes="\h*(#include)\h+(\"[^\"]+?\"|<[^>]+?>)"
	printf %s "
		face include  rgb:87afaf
		face included rgb:b5bd68
		add-highlighter -group /c/macro regex ${includes} 1:include 2:included
		add-highlighter -group /cpp/macro regex ${includes} 1:include 2:included
	"
}

def -docstring 'invoke fzf to open a file' \
	fzf-file %{ %sh{
		if [ -z "$TMUX" ]; then
			echo echo only works inside tmux
		else
		(
			FILE=$(rg --files --hidden | fzf-tmux --bind=ctrl-p:cancel,tab:up,btab:down -d 15)
			if [ -n "$FILE" ]; then
				printf 'eval -client %%{%s} edit %%{%s}\n' "${kak_client}" "${FILE}" | kak -p "${kak_session}"
			fi
		) > /dev/null 2>&1 </dev/null &
		fi
} }

def -docstring 'invoke fzf to select a buffer' \
	fzf-buffer %{ %sh{
		if [ -z "$TMUX" ]; then
			echo echo only works inside tmux
		else
		(
			BUFFER=$(printf %s\\n "${kak_buflist}" | tr : '\n' | fzf-tmux --bind=ctrl-e:cancel,tab:up,btab:down -d 15)
			if [ -n "$BUFFER" ]; then
				echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
			fi
		) > /dev/null 2>&1 < /dev/null &
		fi
} }

# Aliases for tmux-new
alias global sp tmux-new-vertical
alias global vsp tmux-new-horizontal

# Aliases for fzf
alias global ff fzf-file
alias global fb fzf-buffer

# Ctrl-p for fuzzy-file, Ctrl-e for fuzzy-buffer
map global normal <c-p> :ff<ret>
map global normal <c-e> :fb<ret>

# Mawww's kakrc

set global makecmd 'make -j8'
#set global grepcmd 'ag --column'
#map global normal <c-p> :lint<ret>

hook global WinSetOption filetype=(c|cpp) %{
	clang-enable-autocomplete
	clang-enable-diagnostics
	alias window lint clang-parse
	alias window lint-next clang-diagnostics-next
}

hook global WinSetOption filetype=python %{
	jedi-enable-autocomplete
	flake8-enable-diagnostics
	alias window lint flake8-lint
	alias window lint-next flake8-diagnostics-next
}

decl -hidden regex curword
face CurWord default,rgb:4a4a4a
face SearchHl default,rgb:555500

hook global WinCreate .* %{
	addhl show_matching
	addhl dynregex '%reg{/}' 0:SearchHl

	# Highlight the word under the cursor
	addhl dynregex '%opt{curword}' 0:CurWord
}

hook global NormalIdle .* %{
	eval -draft %{ try %{
		exec <space><a-i>w <a-k>\`\w+\'<ret>
		set buffer curword "\b\Q%val{selection}\E\b"
	} catch %{
		set buffer curword ''
	} }
}
map global normal = ':prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>'

map global user n ':lint-next<ret>'
map global user p '!xclip -o<ret>'
map global user y '<a-|>xclip -selection c -i<ret>; :echo -color Information "copied selection to X11 clipboard"<ret>'
map global user R '|xclip -o<ret>'

hook global BufOpenFifo '\*grep\*' %{ map -- global normal - ':grep-next<ret>' }
hook global BufOpenFifo '\*make\*' %{ map -- global normal - ':make-next<ret>' }

hook global WinCreate ^[^*]+$ %{ addhl number_lines }

set global ui_options ncurses_status_on_top=true

map global normal '#' :comment-line<ret>

def ide %{
	rename-client main
	set global jumpclient main

	new rename-client tools
	set global toolsclient tools

	new rename-client docs
	set global docsclient docs
}

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <backtab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <backtab> <c-p> }

def find -params 1 -shell-candidates %{ find . -type f } %{ edit %arg{1} }
